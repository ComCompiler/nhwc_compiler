#!/bin/bash

# 使用说明:
# bash auto_test : 把 sy_path 中所有文件运行一遍
# bash auto_test ./for_auto_test/00sy/***.sy : 只运行一边这个 sy 文件
# 本脚本自动将 .in 文件输入（如果有的话）然后输出到 .ours_out 文件夹下，并自动和 .official_out 文件夹中的 .out 进行比对
# 有 .in，把 .in 文件输入
# 没 .in，直接运行 .sy 文件

export in_path=/home/mineral/Compiler2024-nhwc/for_auto_test/00in
export official_path=/home/mineral/Compiler2024-nhwc/for_auto_test/00official_out
export sy_path=/home/mineral/Compiler2024-nhwc/for_auto_test/00sy

export s_path=/home/mineral/Compiler2024-nhwc/for_auto_test/1s
export o_path=/home/mineral/Compiler2024-nhwc/for_auto_test/2o
export elf_path=/home/mineral/Compiler2024-nhwc/for_auto_test/3elf
export ours_out_path=/home/mineral/Compiler2024-nhwc/for_auto_test/4ours_out

# 定义颜色
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export NC='\033[0m' # 没有颜色
export ret_val=-1

timeout_duration=4s

# 删除指定目录中的所有内容
rm -rf $elf_path/*
rm -rf $o_path/*
rm -rf $ours_out_path/*
rm -rf $s_path/*

# cargo build --release

# 初始化数组

# 初始化计数器
correct_count=0
incorrect_count=0

# 检查是否提供了单个 .sy 文件作为参数
echo $1 | tee /home/mineral/log 
file_name="${1}"
if [ "$#" -eq 1 ]; then
    file_name=$1
else
    echo "you should choose one file"
    file_name=32_many_params3.c
fi

echo $file_name | tee /home/mineral/log 
if [ -f "$file_name"  ]; then
    echo "is_file" | tee /home/mineral/log 
    # 获取文件的基本名称，没有路径
    export base_name=$(basename "$file_name" .c)
    # 执行编译命令，输出到同一目录
    /home/mineral/Compiler2024-nhwc/target/release/compiler "$file_name" -o "$s_path/${base_name}.s" -a 2> /dev/null
    compile_status=$?

    if [ $compile_status -ne 0 ]; then
        exit 1
    fi
    
    # 使用 gcc 工具链把 .s 文件链接
    riscv64-linux-gnu-as "$s_path/${base_name}.s" -o "$o_path/${base_name}.o"
    riscv64-linux-gnu-gcc --static "$o_path/${base_name}.o" -lsysy -L/home/mineral/Compiler2024-nhwc/ -o "$elf_path/${base_name}.elf" -lc

    gcc $file_name -o ${file_name}.elf 
    if [ $? -ne 0 ]; then
        exit 4
    fi

    # 检查 ELF 文件是否生成
    if [ ! -s "$elf_path/${base_name}.elf" ]; then
        echo -e "$RED Failed to generate ELF file: $elf_path/${base_name}.elf $NC" | tee /home/mineral/log 
        exit 1
    fi

    # 如果有对应的 .in 文件，运行 .elf 文件，并将结果输出到 ours_out

    if [ -f "$in_path/${FIXED_INPUT_FILE}.in" ]; then
        timeout 4s qemu-riscv64-static "$elf_path/${base_name}.elf" < "$in_path/${FIXED_INPUT_FILE}.in" > "$ours_out_path/${FIXED_INPUT_FILE}.out" 2>&1 
        export ret_val=$?
        echo -e "\n$ret_val" >> "$ours_out_path/${base_name}.out" | tee /home/mineral/log 
    else
        timeout 4s qemu-riscv64-static "$elf_path/${base_name}.elf" > "$ours_out_path/${FIXED_INPUT_FILE}.out" 2>&1 
        export ret_val=$?
        echo -e "\n$ret_val" >> "$ours_out_path/${base_name}.out" | tee /home/mineral/log 
        echo -e "can't find in file $in_path/${FIXED_INPUT_FILE}.in so input nothing" | tee /home/mineral/log
    fi
    # 删除.out文件的第一行 (时间记录)
    sed -i '1d' "$ours_out_path/${base_name}.out"
    # 添加需要比对的文件路径到数组中

    if diff -wB "$ours_out_path/${base_name}.out" "$official_path/${base_name}.out" > /dev/null; then
        echo -e "${GREEN}${base_name} 过了${NC}" | tee /home/mineral/log 
    else
        diff -wB "$ours_out_path/${base_name}.out" "$official_path/${base_name}.out" -y | head -n 10
        echo -e "${RED}${base_name} 结果不一样!${NC}" | tee /home/mineral/log 
    fi

    # files_to_compare+=("$ours_out_path/${base_name}.out $official_path/${base_name}.out")
else 
    echo "${file_name} is not a file" | tee /home/mineral/log 
fi

# # 执行所有文件的比对
# for files in "${files_to_compare[@]}"; do
#     # 拆分文件路径
#     IFS=' ' read -r ours_file official_file <<< "$files"
#     if diff -wB "$ours_file" "$official_file" > /dev/null; then
#         echo -e "${GREEN}$(basename "$ours_file") 过了${NC}"
#         let correct_count++
#     else
#         echo -e "${RED}$(basename "$ours_file") 结果不一样!${NC}"
#         diff -wB "$ours_out_path/$(basename "$ours_file")" "$official_path/$(basename "$ours_file")" -y | head -n 10
#         let incorrect_count++
#     fi
# done

# 输出统计结果

echo $ret_val | tee /home/mineral/log 

# if timeout then return -1 
if [ "$ret_val" == "124" ]; then 
    exit 2
fi


if [ "$ret_val" == "139" ]; then
    exit 0
else 
    exit 1
fi
