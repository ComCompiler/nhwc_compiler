 1    Define main _s0 [] -> main_ret _s0 
         28   alloc i32 temp_3 _s16 
          label %0 _s0: 
         27   new_var i32 %temp_30 
         29   temp_31 =  Call i32 ififElse _s0() 
         30   ret temp_31 
 0    Define ififElse _s0 [] -> ififElse_ret _s0 
         3    alloc i32 a _s2 
         6    alloc i32 b _s2 
         11   alloc i32 temp_0 _s9 
         18   alloc i1 temp_1 _s7 
         24   alloc i1 temp_2 _s9 
          label %1 _s0: 
         2    new_var i32 %a0 
         4    a1 = 5 _s0 
         5    new_var i32 %b0 
         7    b1 = 10 _s0 
              jump label: %2 _s0 
          label %2 _s0: 
         17   new_var i1 %temp_10 
         19   temp_11 = icmp i1 Eq a1, 5 _s0 
         20   br i1 temp_11, label branch.true: _s8, label branch.false: _s8 
     15   label branch.true: _s8: 
         23   new_var i1 %temp_20 
         25   temp_21 = icmp i1 Eq b1, 10 _s0 
         26   br i1 temp_21, label branch.true: _s10, label branch.false: _s10 
     21   label branch.true: _s10: 
         14   a5 = 25 _s0 
              jump label: %3 _s0 
     22   label branch.false: _s10: 
         10   new_var i32 %temp_00 
         12   temp_01 = Add i32 a1, 15 _s0 
         13   a4 = temp_01 
              jump label: %3 _s0 
          label %3 _s0: 
         31   a3 = phi [a4,instr:13],[a5,instr:14], 
     16   label branch.false: _s8: 
         32   a2 = phi [a1,instr:4],[a3,instr:31], 
          label %4 _s0: 
         8    breakpoint bp1 _s13([a _s13.simu_val, b _s13.simu_val]) ! 
         9    ret a2 
